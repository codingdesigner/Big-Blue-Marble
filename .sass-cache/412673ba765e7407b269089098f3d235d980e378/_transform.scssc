3.2.0.alpha.76 (Bleeding Edge)
1faeeb68ccdcb0b2c4cbe63133e1285a536c5067
o:Sass::Tree::RootNode
:@has_childrenT:
@linei:@template"öH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari is the only browser that currently supports 3D transforms.
// Because of that it can be important to control whether a given 2D transform
// uses the full range of experimental browser prefixes, or only the 3D list.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Official **(Only Safari Supports 3D perspective)**

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:@options{ :@children[io:Sass::Tree::ImportNode
;i;0;	@;
[ :@imported_filename"sharedo:Sass::Tree::CommentNode
;i;	@:
@type:silent;
[ :@value["/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari is the only browser that currently supports 3D transforms.
 * Because of that it can be important to control whether a given 2D transform
 * uses the full range of experimental browser prefixes, or only the 3D list.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Official **(Only Safari Supports 3D perspective)** */o;
;i;	@;;;
[ ;["¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */o;
;i;	@;;;
[ ;["Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */o;
;i ;	@;;;
[ ;["p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */o;
;i4;	@;;;
[ ;["a/* Defaults ------------------------------------------------------------------
 * @doc on */o;
;i7;	@;;;
[ ;["./* The default x-origin for transforms */o:Sass::Tree::VariableNode;i8;	@:@guarded"!default;
[ :
@expro:Sass::Script::Number;i8:@denominator_units[ ;	@:@numerator_units["%:@original"50%;i7:
@name"default-origin-xo;
;i9;	@;;;
[ ;["./* The default y-origin for transforms */o;;i:;	@;"!default;
[ ;o;;i:;[ ;	@;["%;"50%;i7;"default-origin-yo;
;i;;	@;;;
[ ;["./* The default z-origin for transforms */o;;i<;	@;"!default;
[ ;o;;i<;[ ;	@;["%;"50%;i7;"default-origin-zo;
;i?;	@;;;
[ ;["//* The default x-multiplier for scaling */o;;i@;	@;"!default;
[ ;o;;i@;[ ;	@;[ ;"	1.25;f	1.25;"default-scale-xo;
;iA;	@;;;
[ ;["//* The default y-multiplier for scaling */o;;iB;	@;"!default;
[ ;o:Sass::Script::Variable	;iB:@underscored_name"default_scale_x;	@;"default-scale-x;"default-scale-yo;
;iC;	@;;;
[ ;["//* The default z-multiplier for scaling */o;;iD;	@;"!default;
[ ;o;	;iD;"default_scale_x;	@;"default-scale-x;"default-scale-zo;
;iG;	@;;;
[ ;["*/* The default angle for rotations */o;;iH;	@;"!default;
[ ;o;;iH;[ ;	@;["deg;"
45deg;i2;"default-rotateo;
;iK;	@;;;
[ ;["</* The default x-vector for the axis of 3d rotations */o;;iL;	@;"!default;
[ ;o;;iL;@O;	@;[ ;"1;i;"default-vector-xo;
;iM;	@;;;
[ ;["</* The default y-vector for the axis of 3d rotations */o;;iN;	@;"!default;
[ ;o;;iN;@O;	@;[ ;"1;i;"default-vector-yo;
;iO;	@;;;
[ ;["</* The default z-vector for the axis of 3d rotations */o;;iP;	@;"!default;
[ ;o;;iP;@O;	@;[ ;"1;i;"default-vector-zo;
;iS;	@;;;
[ ;["0/* The default x-length for translations */o;;iT;	@;"!default;
[ ;o;;iT;[ ;	@;["em;"1em;i;"default-translate-xo;
;iU;	@;;;
[ ;["0/* The default y-length for translations */o;;iV;	@;"!default;
[ ;o;	;iV;"default_translate_x;	@;"default-translate-x;"default-translate-yo;
;iW;	@;;;
[ ;["0/* The default z-length for translations */o;;iX;	@;"!default;
[ ;o;	;iX;"default_translate_x;	@;"default-translate-x;"default-translate-zo;
;i[;	@;;;
[ ;["*/* The default x-angle for skewing */o;;i\;	@;"!default;
[ ;o;;i\;[ ;	@;["deg;"	5deg;i
;"default-skew-xo;
;i];	@;;;
[ ;["*/* The default y-angle for skewing */o;;i^;	@;"!default;
[ ;o;;i^;[ ;	@;["deg;"	5deg;i
;"default-skew-yo;
;ia;	@;;;
[ ;["/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */o:Sass::Tree::MixinDefNode;T;il:
@args[[o;;"origin;	@;"origin0[o;;"only3d;	@;"only3d0;	@;
[o;;im;	@;0;
[ ;o:Sass::Script::Operation
;im;	@:@operand2o;
;im;	@;o;;im;@O;	@;[ ;"2;i:@operator:gt:@operand1o:Sass::Script::Funcall
;im;[o;"
;im;[o;	;im;"origin;	@;"origin;	@:@keywords{ ;"-compass-list;	@;#{ ;"-compass-list-size;:or;!o;	;im;"only3d;	@;"only3d;"only3du:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@linein:@underscored_name"only3d:@options{ :
@name"only3du:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@lineiu:
@args[o:Sass::Script::String	;is:@options{ :
@type:identifier:@value"transform-origino:Sass::Script::Variable	;is:@underscored_name"origin;	@
:
@name"origino;	;it;	@
;
;;"	-mozo;	;it;	@
;
;;"-webkito;	;it;	@
;
;;"-oo;	;it;	@
;
;;"-mso:!Sass::Script::UnaryOperation	;it;	@
:@operando;	;it;	@
;
;;"-khtml:@operator:noto;	;it;	@
;
;;"official;	@
:@children[ :@keywords{ ;"experimental[o:Sass::Tree::MixinNode;iq:
@args[o:Sass::Script::String	;io;@:
@type:identifier:@value"transform-origino; 	;io;"origin;@;	"origino:!Sass::Script::UnaryOperation	;ip;@:@operando;	;ip;@;;;"	-moz:@operator:noto;	;ip;@;;;"-webkito;	;ip;@;o;	;ip;@;;;"-o;;o;	;ip;@;o;	;ip;@;;;"-ms;;o;	;ip;@;o;	;ip;@;;;"-khtml;;o;	;ip;@;;;"official;@:@children[ :@keywords{ ;	"experimental;"apply-origino;
;iy;	@;;;
[ ;["#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */o;;T;i;[	[o;;"origin_x;	@;"origin-xo;	;i|;"default_origin_x;	@;"default-origin-x[o;;"origin_y;	@;"origin-yo;	;i};"default_origin_y;	@;"default-origin-y[o;;"origin_z;	@;"origin-zo:Sass::Script::Bool;i~;	@;F[o;;"only3d;	@;"only3do;"
;i;[o;	;i;"origin_z;	@;"origin-zo;&;i;	@;To;&;i;	@;F;	@;#{ ;"if;	@;
[o;;i;	@;0;
[ ;o;"
;i;[o:Sass::Script::String	;i;	@;:string;" ;	@;#{ ;"unquote;"originu;%[o:Sass::Script::Operation
:
@linei:@options{ :@operand2o:Sass::Script::Variable	;i:@underscored_name"origin_z;@:
@name"origin-z:@operator:or:@operand1o; 
;i;@;o;		;i;
"origin_y;@;"origin-y;;;o;		;i;
"origin_x;@;"origin-x0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_x:@options{ :
@name"origin-xu:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:
@linei:@options{ :@guarded0:@children[ :
@expro:Sass::Script::Number;i:@denominator_units[ ;@:@numerator_units["%:@original"50%:@valuei7:
@name"origin[o:Sass::Tree::VariableNode;i;@:@guarded0:@children[ :
@expro; 	;i;"origin_x;@;	"origin-x;	"originu;Þ[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_y:@options{ :
@name"origin-yu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_z:@options{ :
@name"origin-z0[o:Sass::Tree::VariableNode;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i;@:@separator:
space:@value[o; 	;i;"origin;@;	"origino:Sass::Script::Number;i:@denominator_units[ ;@:@numerator_units["%:@original"50%;i7;	"origin[o:Sass::Tree::VariableNode;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i;@:@separator:
space:@value[o; 	;i;"origin;@;	"origino; 	;i;"origin_y;@;	"origin-y;	"originu;5[o:Sass::Script::Variable	:
@linei:@underscored_name"origin_z:@options{ :
@name"origin-z0[o:Sass::Tree::VariableNode;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i;@:@separator:
space:@value[o; 	;i;"origin;@;	"origino; 	;i;"origin_z;@;	"origin-z;	"origino:Sass::Tree::MixinNode;i:
@args[o;		;i;
"origin;@;"origino;		;i;
"only3d;@;"only3d;@:@children[ :@keywords{ ;"apply-origin;"transform-origino;
;i;	@;;;
[ ;["¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */o;;T;i;[[o;;"transform;	@;"transform0[o;;"only3d;	@;"only3do;&;i;	@;F;	@;
[u;%6[o:Sass::Script::Variable	:
@linei:@underscored_name"only3d:@options{ :
@name"only3du:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@linei:
@args[o:Sass::Script::String	;i:@options{ :
@type:identifier:@value"transformo:Sass::Script::Variable	;i:@underscored_name"transform;	@
:
@name"transformo;	;i;	@
;
;;"	-mozo;	;i;	@
;
;;"-webkito;	;i;	@
;
;;"-oo;	;i;	@
;
;;"-mso:!Sass::Script::UnaryOperation	;i;	@
:@operando;	;i;	@
;
;;"-khtml:@operator:noto;	;i;	@
;
;;"official;	@
:@children[ :@keywords{ ;"experimental[o:Sass::Tree::MixinNode;i:
@args[o:Sass::Script::String	;i;@:
@type:identifier:@value"transformo; 	;i;"transform;@;	"transformo:!Sass::Script::UnaryOperation	;i;@:@operando;	;i;@;;;"	-moz:@operator:noto;	;i;@;;;"-webkito;	;i;@;o;	;i;@;;;"-o;;o;	;i;@;o;	;i;@;;;"-ms;;o;	;i;@;o;	;i;@;;;"-khtml;;o;	;i;@;;;"official;@:@children[ :@keywords{ ;	"experimental;"transformo;
;i;	@;;;
[ ;["D/* Shortcut to target all browsers with 2D transform support */o;;T;i ;[[o;;"
trans;	@;"
trans0;	@;
[o:Sass::Tree::MixinNode;i¡;[o;	;i¡;"
trans;	@;"
transo;&;i¡;	@;F;	@;
[ ;#{ ;"transform;"transform2do;
;i¤;	@;;;
[ ;["E/* Shortcut to target only browsers with 3D transform support */o;;T;i¥;[[o;;"
trans;	@;"
trans0;	@;
[o;);i¦;[o;	;i¦;"
trans;	@;"
transo;&;i¦;	@;T;	@;
[ ;#{ ;"transform;"transform3do;
;i©;	@;;;
[ ;["m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */o;
;i­;	@;;;
[ ;["`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */o;;T;i´;[[o;;"p;	@;"p0;	@;
[o;);i·;[o;'	;iµ;	@;:identifier;"perspectiveo;	;iµ;"p;	@;"po:!Sass::Script::UnaryOperation	;i¶;	@:@operando;'	;i¶;	@;;*;"	-moz;:noto;'	;i¶;	@;;*;"-webkito;+	;i¶;	@;,o;'	;i¶;	@;;*;"-o;;-o;+	;i¶;	@;,o;'	;i¶;	@;;*;"-ms;;-o;+	;i¶;	@;,o;'	;i¶;	@;;*;"-khtml;;-o;'	;i¶;	@;;*;"official;	@;
[ ;#{ ;"experimental;"perspectiveo;
;iº;	@;;;
[ ;["¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */o;;T;i¿;[[o;;"origin;	@;"origino;;i¿;[ ;	@;["%;"50%;i7;	@;
[o;);iÂ;[o;'	;iÀ;	@;;*;"perspective-origino;	;iÀ;"origin;	@;"origino;+	;iÁ;	@;,o;'	;iÁ;	@;;*;"	-moz;;-o;'	;iÁ;	@;;*;"-webkito;+	;iÁ;	@;,o;'	;iÁ;	@;;*;"-o;;-o;+	;iÁ;	@;,o;'	;iÁ;	@;;*;"-ms;;-o;+	;iÁ;	@;,o;'	;iÁ;	@;;*;"-khtml;;-o;'	;iÁ;	@;;*;"official;	@;
[ ;#{ ;"experimental;"perspective-origino;
;iÅ;	@;;;
[ ;["÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */o;;T;iË;[[o;;"
style;	@;"
styleo;'	;iË;	@;;*;"preserve-3d;	@;
[o;);iÎ;[o;'	;iÌ;	@;;*;"transform-styleo;	;iÌ;"
style;	@;"
styleo;+	;iÍ;	@;,o;'	;iÍ;	@;;*;"	-moz;;-o;'	;iÍ;	@;;*;"-webkito;+	;iÍ;	@;,o;'	;iÍ;	@;;*;"-o;;-o;+	;iÍ;	@;,o;'	;iÍ;	@;;*;"-ms;;-o;+	;iÍ;	@;,o;'	;iÍ;	@;;*;"-khtml;;-o;'	;iÍ;	@;;*;"official;	@;
[ ;#{ ;"experimental;"transform-styleo;
;iÑ;	@;;;
[ ;["ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */o;;T;i×;[[o;;"visibility;	@;"visibilityo;'	;i×;	@;;*;"hidden;	@;
[o;);iÚ;[o;'	;iØ;	@;;*;"backface-visibilityo;	;iØ;"visibility;	@;"visibilityo;+	;iÙ;	@;,o;'	;iÙ;	@;;*;"	-moz;;-o;'	;iÙ;	@;;*;"-webkito;+	;iÙ;	@;,o;'	;iÙ;	@;;*;"-o;;-o;+	;iÙ;	@;,o;'	;iÙ;	@;;*;"-ms;;-o;+	;iÙ;	@;,o;'	;iÙ;	@;;*;"-khtml;;-o;'	;iÙ;	@;;*;"official;	@;
[ ;#{ ;"experimental;"backface-visibilityo;
;iÝ;	@;;;
[ ;["S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */o;
;iä;	@;;;
[ ;["a/* Scale ---------------------------------------------------------------------
 * @doc on */o;
;iç;	@;;;
[ ;["¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;iõ;[	[o;;"scale_x;	@;"scale-xo;	;iñ;"default_scale_x;	@;"default-scale-x[o;;"scale_y;	@;"scale-yo;	;iò;"scale_x;	@;"scale-x[o;;"perspective;	@;"perspectiveo;&;ió;	@;F[o;;"only3d;	@;"only3do;&;iô;	@;F;	@;
[o;;iö;	@;0;
[ ;o;"
;iö;[o;	;iö;"scale_x;	@;"scale-xo;	;iö;"scale_y;	@;"scale-y;	@;#{ ;"
scale;"
transu;%[o:Sass::Script::Variable	:
@linei÷:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;i÷;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i÷;@:@separator:
space:@value[o:Sass::Script::Funcall
;i÷:
@args[o; 	;i÷;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;i÷;"
trans;@;	"
trans;	"
transo;);iø;[o;	;iø;"
trans;	@;"
transo;	;iø;"only3d;	@;"only3d;	@;
[ ;#{ ;"transform;"
scaleo;
;iû;	@;;;
[ ;["¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;i;[[o;;"
scale;	@;"
scaleo;	;i ;"default_scale_x;	@;"default-scale-x[o;;"perspective;	@;"perspectiveo;&;i;	@;F[o;;"only3d;	@;"only3do;&;i;	@;F;	@;
[o;;i;	@;0;
[ ;o;"
;i;[o;	;i;"
scale;	@;"
scale;	@;#{ ;"scaleX;"
transu;%[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i;@:@separator:
space:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;i;"
trans;@;	"
trans;	"
transo;);i;[o;	;i;"
trans;	@;"
transo;	;i;"only3d;	@;"only3d;	@;
[ ;#{ ;"transform;"scaleXo;
;i	;	@;;;
[ ;["¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;i;[[o;;"
scale;	@;"
scaleo;	;i;"default_scale_y;	@;"default-scale-y[o;;"perspective;	@;"perspectiveo;&;i;	@;F[o;;"only3d;	@;"only3do;&;i;	@;F;	@;
[o;;i;	@;0;
[ ;o;"
;i;[o;	;i;"
scale;	@;"
scale;	@;#{ ;"scaleY;"
transu;%[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i;@:@separator:
space:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;i;"
trans;@;	"
trans;	"
transo;);i;[o;	;i;"
trans;	@;"
transo;	;i;"only3d;	@;"only3d;	@;
[ ;#{ ;"transform;"scaleYo;
;i;	@;;;
[ ;["/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;i;[[o;;"
scale;	@;"
scaleo;	;i;"default_scale_z;	@;"default-scale-z[o;;"perspective;	@;"perspectiveo;&;i;	@;F;	@;
[o;;i;	@;0;
[ ;o;"
;i;[o;	;i;"
scale;	@;"
scale;	@;#{ ;"scaleZ;"
transu;%[o:Sass::Script::Variable	:
@linei :@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;i ;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i ;@:@separator:
space:@value[o:Sass::Script::Funcall
;i :
@args[o; 	;i ;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;i ;"
trans;@;	"
trans;	"
transo;);i!;[o;	;i!;"
trans;	@;"
trans;	@;
[ ;#{ ;"transform3d;"scaleZo;
;i$;	@;;;
[ ;["·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;i-;[	[o;;"scale_x;	@;"scale-xo;	;i);"default_scale_x;	@;"default-scale-x[o;;"scale_y;	@;"scale-yo;	;i*;"default_scale_y;	@;"default-scale-y[o;;"scale_z;	@;"scale-zo;	;i+;"default_scale_z;	@;"default-scale-z[o;;"perspective;	@;"perspectiveo;&;i,;	@;F;	@;
[o;;i.;	@;0;
[ ;o;"
;i.;[o;	;i.;"scale_x;	@;"scale-xo;	;i.;"scale_y;	@;"scale-yo;	;i.;"scale_z;	@;"scale-z;	@;#{ ;"scale3d;"
transu;%[o:Sass::Script::Variable	:
@linei/:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;i/;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i/;@:@separator:
space:@value[o:Sass::Script::Funcall
;i/:
@args[o; 	;i/;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;i/;"
trans;@;	"
trans;	"
transo;);i0;[o;	;i0;"
trans;	@;"
trans;	@;
[ ;#{ ;"transform3d;"scale3do;
;i3;	@;;;
[ ;["m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */o;
;i7;	@;;;
[ ;["ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;i@;[[o;;"rotate;	@;"rotateo;	;i=;"default_rotate;	@;"default-rotate[o;;"perspective;	@;"perspectiveo;&;i>;	@;F[o;;"only3d;	@;"only3do;&;i?;	@;F;	@;
[o;;iA;	@;0;
[ ;o;"
;iA;[o;	;iA;"rotate;	@;"rotate;	@;#{ ;"rotate;"
transu;%[o:Sass::Script::Variable	:
@lineiB:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;iB;@:@guarded0:@children[ :
@expro:Sass::Script::List	;iB;@:@separator:
space:@value[o:Sass::Script::Funcall
;iB:
@args[o; 	;iB;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;iB;"
trans;@;	"
trans;	"
transo;);iC;[o;	;iC;"
trans;	@;"
transo;	;iC;"only3d;	@;"only3d;	@;
[ ;#{ ;"transform;"rotateo;
;iF;	@;;;
[ ;["/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;iM;[[o;;"rotate;	@;"rotateo;	;iJ;"default_rotate;	@;"default-rotate[o;;"perspective;	@;"perspectiveo;&;iK;	@;F[o;;"only3d;	@;"only3do;&;iL;	@;F;	@;
[o;);iN;[o;	;iN;"rotate;	@;"rotateo;	;iN;"perspective;	@;"perspectiveo;	;iN;"only3d;	@;"only3d;	@;
[ ;#{ ;"rotate;"rotateZo;
;iQ;	@;;;
[ ;["¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;iX;[[o;;"rotate;	@;"rotateo;	;iV;"default_rotate;	@;"default-rotate[o;;"perspective;	@;"perspectiveo;&;iW;	@;F;	@;
[o;;iY;	@;0;
[ ;o;"
;iY;[o;	;iY;"rotate;	@;"rotate;	@;#{ ;"rotateX;"
transu;%[o:Sass::Script::Variable	:
@lineiZ:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;iZ;@:@guarded0:@children[ :
@expro:Sass::Script::List	;iZ;@:@separator:
space:@value[o:Sass::Script::Funcall
;iZ:
@args[o; 	;iZ;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;iZ;"
trans;@;	"
trans;	"
transo;);i[;[o;	;i[;"
trans;	@;"
trans;	@;
[ ;#{ ;"transform3d;"rotateXo;
;i^;	@;;;
[ ;["§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;ie;[[o;;"rotate;	@;"rotateo;	;ic;"default_rotate;	@;"default-rotate[o;;"perspective;	@;"perspectiveo;&;id;	@;F;	@;
[o;;if;	@;0;
[ ;o;"
;if;[o;	;if;"rotate;	@;"rotate;	@;#{ ;"rotateY;"
transu;%[o:Sass::Script::Variable	:
@lineig:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;ig;@:@guarded0:@children[ :
@expro:Sass::Script::List	;ig;@:@separator:
space:@value[o:Sass::Script::Funcall
;ig:
@args[o; 	;ig;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;ig;"
trans;@;	"
trans;	"
transo;);ih;[o;	;ih;"
trans;	@;"
trans;	@;
[ ;#{ ;"transform3d;"rotateYo;
;ik;	@;;;
[ ;["¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;ix;[
[o;;"vector_x;	@;"vector-xo;	;is;"default_vector_x;	@;"default-vector-x[o;;"vector_y;	@;"vector-yo;	;it;"default_vector_y;	@;"default-vector-y[o;;"vector_z;	@;"vector-zo;	;iu;"default_vector_z;	@;"default-vector-z[o;;"rotate;	@;"rotateo;	;iv;"default_rotate;	@;"default-rotate[o;;"perspective;	@;"perspectiveo;&;iw;	@;F;	@;
[o;;iy;	@;0;
[ ;o;"
;iy;[	o;	;iy;"vector_x;	@;"vector-xo;	;iy;"vector_y;	@;"vector-yo;	;iy;"vector_z;	@;"vector-zo;	;iy;"rotate;	@;"rotate;	@;#{ ;"rotate3d;"
transu;%[o:Sass::Script::Variable	:
@lineiz:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;iz;@:@guarded0:@children[ :
@expro:Sass::Script::List	;iz;@:@separator:
space:@value[o:Sass::Script::Funcall
;iz:
@args[o; 	;iz;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;iz;"
trans;@;	"
trans;	"
transo;);i{;[o;	;i{;"
trans;	@;"
trans;	@;
[ ;#{ ;"transform3d;"rotate3do;
;i~;	@;;;
[ ;["m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */o;
;i;	@;;;
[ ;["5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;i;[	[o;;"translate_x;	@;"translate-xo;	;i;"default_translate_x;	@;"default-translate-x[o;;"translate_y;	@;"translate-yo;	;i;"default_translate_y;	@;"default-translate-y[o;;"perspective;	@;"perspectiveo;&;i;	@;F[o;;"only3d;	@;"only3do;&;i;	@;F;	@;
[o;;i;	@;0;
[ ;o;"
;i;[o;	;i;"translate_x;	@;"translate-xo;	;i;"translate_y;	@;"translate-y;	@;#{ ;"translate;"
transu;%[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i;@:@separator:
space:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;i;"
trans;@;	"
trans;	"
transo;);i;[o;	;i;"
trans;	@;"
transo;	;i;"only3d;	@;"only3d;	@;
[ ;#{ ;"transform;"translateo;
;i;	@;;;
[ ;["³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;i;[[o;;"trans_x;	@;"trans-xo;	;i;"default_translate_x;	@;"default-translate-x[o;;"perspective;	@;"perspectiveo;&;i;	@;F[o;;"only3d;	@;"only3do;&;i;	@;F;	@;
[o;;i;	@;0;
[ ;o;"
;i;[o;	;i;"trans_x;	@;"trans-x;	@;#{ ;"translateX;"
transu;%[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i;@:@separator:
space:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;i;"
trans;@;	"
trans;	"
transo;);i;[o;	;i;"
trans;	@;"
transo;	;i;"only3d;	@;"only3d;	@;
[ ;#{ ;"transform;"translateXo;
;i ;	@;;;
[ ;["³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;i¨;[[o;;"trans_y;	@;"trans-yo;	;i¥;"default_translate_y;	@;"default-translate-y[o;;"perspective;	@;"perspectiveo;&;i¦;	@;F[o;;"only3d;	@;"only3do;&;i§;	@;F;	@;
[o;;i©;	@;0;
[ ;o;"
;i©;[o;	;i©;"trans_y;	@;"trans-y;	@;#{ ;"translateY;"
transu;%[o:Sass::Script::Variable	:
@lineiª:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;iª;@:@guarded0:@children[ :
@expro:Sass::Script::List	;iª;@:@separator:
space:@value[o:Sass::Script::Funcall
;iª:
@args[o; 	;iª;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;iª;"
trans;@;	"
trans;	"
transo;);i«;[o;	;i«;"
trans;	@;"
transo;	;i«;"only3d;	@;"only3d;	@;
[ ;#{ ;"transform;"translateYo;
;i®;	@;;;
[ ;["ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;iµ;[[o;;"trans_z;	@;"trans-zo;	;i³;"default_translate_z;	@;"default-translate-z[o;;"perspective;	@;"perspectiveo;&;i´;	@;F;	@;
[o;;i¶;	@;0;
[ ;o;"
;i¶;[o;	;i¶;"trans_z;	@;"trans-z;	@;#{ ;"translateZ;"
transu;%[o:Sass::Script::Variable	:
@linei·:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;i·;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i·;@:@separator:
space:@value[o:Sass::Script::Funcall
;i·:
@args[o; 	;i·;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;i·;"
trans;@;	"
trans;	"
transo;);i¸;[o;	;i¸;"
trans;	@;"
trans;	@;
[ ;#{ ;"transform3d;"translateZo;
;i»;	@;;;
[ ;["Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;iÄ;[	[o;;"translate_x;	@;"translate-xo;	;iÀ;"default_translate_x;	@;"default-translate-x[o;;"translate_y;	@;"translate-yo;	;iÁ;"default_translate_y;	@;"default-translate-y[o;;"translate_z;	@;"translate-zo;	;iÂ;"default_translate_z;	@;"default-translate-z[o;;"perspective;	@;"perspectiveo;&;iÃ;	@;F;	@;
[o;;iÅ;	@;0;
[ ;o;"
;iÅ;[o;	;iÅ;"translate_x;	@;"translate-xo;	;iÅ;"translate_y;	@;"translate-yo;	;iÅ;"translate_z;	@;"translate-z;	@;#{ ;"translate3d;"
transu;%[o:Sass::Script::Variable	:
@lineiÆ:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;iÆ;@:@guarded0:@children[ :
@expro:Sass::Script::List	;iÆ;@:@separator:
space:@value[o:Sass::Script::Funcall
;iÆ:
@args[o; 	;iÆ;"perspective;@;	"perspective;@:@keywords{ ;	"perspectiveo; 	;iÆ;"
trans;@;	"
trans;	"
transo;);iÇ;[o;	;iÇ;"
trans;	@;"
trans;	@;
[ ;#{ ;"transform3d;"translate3do;
;iÊ;	@;;;
[ ;["m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */o;
;iÎ;	@;;;
[ ;["ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;iÙ;[[o;;"skew_x;	@;"skew-xo;	;iÖ;"default_skew_x;	@;"default-skew-x[o;;"skew_y;	@;"skew-yo;	;i×;"default_skew_y;	@;"default-skew-y[o;;"only3d;	@;"only3do;&;iØ;	@;F;	@;
[o;;iÚ;	@;0;
[ ;o;"
;iÚ;[o;	;iÚ;"skew_x;	@;"skew-xo;	;iÚ;"skew_y;	@;"skew-y;	@;#{ ;"	skew;"
transo;);iÛ;[o;	;iÛ;"
trans;	@;"
transo;	;iÛ;"only3d;	@;"only3d;	@;
[ ;#{ ;"transform;"	skewo;
;iÞ;	@;;;
[ ;["/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;iæ;[[o;;"skew_x;	@;"skew-xo;	;iä;"default_skew_x;	@;"default-skew-x[o;;"only3d;	@;"only3do;&;iå;	@;F;	@;
[o;;iç;	@;0;
[ ;o;"
;iç;[o;	;iç;"skew_x;	@;"skew-x;	@;#{ ;"
skewX;"
transo;);iè;[o;	;iè;"
trans;	@;"
transo;	;iè;"only3d;	@;"only3d;	@;
[ ;#{ ;"transform;"
skewXo;
;ië;	@;;;
[ ;["/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;ió;[[o;;"skew_y;	@;"skew-yo;	;iñ;"default_skew_y;	@;"default-skew-y[o;;"only3d;	@;"only3do;&;iò;	@;F;	@;
[o;;iô;	@;0;
[ ;o;"
;iô;[o;	;iô;"skew_y;	@;"skew-y;	@;#{ ;"
skewY;"
transo;);iõ;[o;	;iõ;"
trans;	@;"
transo;	;iõ;"only3d;	@;"only3d;	@;
[ ;#{ ;"transform;"
skewYo;
;iù;	@;;;
[ ;["/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */o;;T;i;[[o;;"perspective;	@;"perspectiveo;&;i;	@;F[o;;"scale_x;	@;"scale-xo;&;i;	@;F[o;;"scale_y;	@;"scale-yo;&;i;	@;F[o;;"scale_z;	@;"scale-zo;&;i;	@;F[o;;"rotate_x;	@;"rotate-xo;&;i;	@;F[o;;"rotate_y;	@;"rotate-yo;&;i;	@;F[o;;"rotate_z;	@;"rotate-zo;&;i	;	@;F[o;;"rotate3d;	@;"rotate3do;&;i
;	@;F[o;;"trans_x;	@;"trans-xo;&;i;	@;F[o;;"trans_y;	@;"trans-yo;&;i;	@;F[o;;"trans_z;	@;"trans-zo;&;i;	@;F[o;;"skew_x;	@;"skew-xo;&;i;	@;F[o;;"skew_y;	@;"skew-yo;&;i;	@;F[o;;"origin_x;	@;"origin-xo;&;i;	@;F[o;;"origin_y;	@;"origin-yo;&;i;	@;F[o;;"origin_z;	@;"origin-zo;&;i;	@;F[o;;"only3d;	@;"only3do;&;i;	@;F;	@;
[o;;i;	@;0;
[ ;o;"
;i;[o;'	;i;	@;;(;" ;	@;#{ ;"unquote;"
transo;
;i;	@;;;
[ ;["/* perspective */u;%.[o:Sass::Script::Variable	:
@linei:@underscored_name"perspective:@options{ :
@name"perspective0[o:Sass::Tree::VariableNode;i;@:@guarded0:@children[ :
@expro:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;@;	"perspective;@:@keywords{ ;	"perspective;	"
transo;
;i;	@;;;
[ ;["/* scale */u;%Ê[o:Sass::Script::Operation
:
@linei:@options{ :@operand2o:Sass::Script::Variable	;i:@underscored_name"scale_y;@:
@name"scale-y:@operator:and:@operand1o;		;i;
"scale_x;@;"scale-xu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@linei:@underscored_name"scale_x:@options{ :
@name"scale-x0[o:Sass::Tree::VariableNode;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i;@:@separator:
space:@value[o; 	;i;"
trans;@;	"
transo:Sass::Script::Funcall
;i:
@args[o; 	;i;"scale_x;@;	"scale-x;@:@keywords{ ;	"scaleX;	"
transu; v[o:Sass::Script::Variable	:
@linei :@underscored_name"scale_y:@options{ :
@name"scale-y0[o:Sass::Tree::VariableNode;i ;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i ;@:@separator:
space:@value[o; 	;i ;"
trans;@;	"
transo:Sass::Script::Funcall
;i :
@args[o; 	;i ;"scale_y;@;	"scale-y;@:@keywords{ ;	"scaleY;	"
transu; v[o:Sass::Script::Variable	:
@linei!:@underscored_name"scale_z:@options{ :
@name"scale-z0[o:Sass::Tree::VariableNode;i!;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i!;@:@separator:
space:@value[o; 	;i!;"
trans;@;	"
transo:Sass::Script::Funcall
;i!:
@args[o; 	;i!;"scale_z;@;	"scale-z;@:@keywords{ ;	"scaleZ;	"
trans[u;L[o:Sass::Script::Variable	:
@linei:@underscored_name"scale_z:@options{ :
@name"scale-zu:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:
@linei:@options{ :@guarded0:@children[ :
@expro:Sass::Script::List	;i;@:@separator:
space:@value[o:Sass::Script::Variable	;i:@underscored_name"
trans;@:
@name"
transo:Sass::Script::Funcall
;i:
@args[o;	;i;"scale_x;@;"scale-xo;	;i;"scale_y;@;"scale-y;@:@keywords{ ;"
scale;"
trans[o:Sass::Tree::VariableNode;i;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i;@:@separator:
space:@value[o; 	;i;"
trans;@;	"
transo:Sass::Script::Funcall
;i:
@args[o; 	;i;"scale_x;@;	"scale-xo; 	;i;"scale_y;@;	"scale-yo; 	;i;"scale_z;@;	"scale-z;@:@keywords{ ;	"scale3d;	"
transo;
;i$;	@;;;
[ ;["/* rotate */u;%{[o:Sass::Script::Variable	:
@linei%:@underscored_name"rotate_x:@options{ :
@name"rotate-x0[o:Sass::Tree::VariableNode;i%;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i%;@:@separator:
space:@value[o; 	;i%;"
trans;@;	"
transo:Sass::Script::Funcall
;i%:
@args[o; 	;i%;"rotate_x;@;	"rotate-x;@:@keywords{ ;	"rotateX;	"
transu;%{[o:Sass::Script::Variable	:
@linei&:@underscored_name"rotate_y:@options{ :
@name"rotate-y0[o:Sass::Tree::VariableNode;i&;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i&;@:@separator:
space:@value[o; 	;i&;"
trans;@;	"
transo:Sass::Script::Funcall
;i&:
@args[o; 	;i&;"rotate_y;@;	"rotate-y;@:@keywords{ ;	"rotateY;	"
transu;%{[o:Sass::Script::Variable	:
@linei':@underscored_name"rotate_z:@options{ :
@name"rotate-z0[o:Sass::Tree::VariableNode;i';@:@guarded0:@children[ :
@expro:Sass::Script::List	;i';@:@separator:
space:@value[o; 	;i';"
trans;@;	"
transo:Sass::Script::Funcall
;i':
@args[o; 	;i';"rotate_z;@;	"rotate-z;@:@keywords{ ;	"rotateZ;	"
transu;%|[o:Sass::Script::Variable	:
@linei(:@underscored_name"rotate3d:@options{ :
@name"rotate3d0[o:Sass::Tree::VariableNode;i(;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i(;@:@separator:
space:@value[o; 	;i(;"
trans;@;	"
transo:Sass::Script::Funcall
;i(:
@args[o; 	;i(;"rotate3d;@;	"rotate3d;@:@keywords{ ;	"rotate3d;	"
transo;
;i*;	@;;;
[ ;["/* translate */u;%Þ[o:Sass::Script::Operation
:
@linei+:@options{ :@operand2o:Sass::Script::Variable	;i+:@underscored_name"trans_y;@:
@name"trans-y:@operator:and:@operand1o;		;i+;
"trans_x;@;"trans-xu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@linei/:@underscored_name"trans_x:@options{ :
@name"trans-x0[o:Sass::Tree::VariableNode;i/;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i/;@:@separator:
space:@value[o; 	;i/;"
trans;@;	"
transo:Sass::Script::Funcall
;i/:
@args[o; 	;i/;"trans_x;@;	"trans-x;@:@keywords{ ;	"translateX;	"
transu; z[o:Sass::Script::Variable	:
@linei0:@underscored_name"trans_y:@options{ :
@name"trans-y0[o:Sass::Tree::VariableNode;i0;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i0;@:@separator:
space:@value[o; 	;i0;"
trans;@;	"
transo:Sass::Script::Funcall
;i0:
@args[o; 	;i0;"trans_y;@;	"trans-y;@:@keywords{ ;	"translateY;	"
transu; z[o:Sass::Script::Variable	:
@linei1:@underscored_name"trans_z:@options{ :
@name"trans-z0[o:Sass::Tree::VariableNode;i1;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i1;@:@separator:
space:@value[o; 	;i1;"
trans;@;	"
transo:Sass::Script::Funcall
;i1:
@args[o; 	;i1;"trans_z;@;	"trans-z;@:@keywords{ ;	"translateZ;	"
trans[u;T[o:Sass::Script::Variable	:
@linei,:@underscored_name"trans_z:@options{ :
@name"trans-zu:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:
@linei-:@options{ :@guarded0:@children[ :
@expro:Sass::Script::List	;i-;@:@separator:
space:@value[o:Sass::Script::Variable	;i-:@underscored_name"
trans;@:
@name"
transo:Sass::Script::Funcall
;i-:
@args[o;	;i-;"trans_x;@;"trans-xo;	;i-;"trans_y;@;"trans-y;@:@keywords{ ;"translate;"
trans[o:Sass::Tree::VariableNode;i,;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i,;@:@separator:
space:@value[o; 	;i,;"
trans;@;	"
transo:Sass::Script::Funcall
;i,:
@args[o; 	;i,;"trans_x;@;	"trans-xo; 	;i,;"trans_y;@;	"trans-yo; 	;i,;"trans_z;@;	"trans-z;@:@keywords{ ;	"translate3d;	"
transo;
;i4;	@;;;
[ ;["/* skew */u;%[o:Sass::Script::Operation
:
@linei5:@options{ :@operand2o:Sass::Script::Variable	;i5:@underscored_name"skew_y;@:
@name"skew-y:@operator:and:@operand1o;		;i5;
"skew_x;@;"skew-xu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@linei7:@underscored_name"skew_x:@options{ :
@name"skew-x0[o:Sass::Tree::VariableNode;i7;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i7;@:@separator:
space:@value[o; 	;i7;"
trans;@;	"
transo:Sass::Script::Funcall
;i7:
@args[o; 	;i7;"skew_x;@;	"skew-x;@:@keywords{ ;	"
skewX;	"
transu; q[o:Sass::Script::Variable	:
@linei8:@underscored_name"skew_y:@options{ :
@name"skew-y0[o:Sass::Tree::VariableNode;i8;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i8;@:@separator:
space:@value[o; 	;i8;"
trans;@;	"
transo:Sass::Script::Funcall
;i8:
@args[o; 	;i8;"skew_y;@;	"skew-y;@:@keywords{ ;	"
skewY;	"
trans[o:Sass::Tree::VariableNode;i5;@:@guarded0:@children[ :
@expro:Sass::Script::List	;i5;@:@separator:
space:@value[o;		;i5;
"
trans;@;"
transo:Sass::Script::Funcall
;i5:
@args[o;		;i5;
"skew_x;@;"skew-xo;		;i5;
"skew_y;@;"skew-y;@:@keywords{ ;"	skew;"
transo;
;i;;	@;;;
[ ;["/* apply it! */o;);i<;[o;	;i<;"
trans;	@;"
transo;	;i<;"only3d;	@;"only3d;	@;
[ ;#{ ;"transformo;);i=;[	o;	;i=;"origin_x;	@;"origin-xo;	;i=;"origin_y;	@;"origin-yo;	;i=;"origin_z;	@;"origin-zo;	;i=;"only3d;	@;"only3d;	@;
[ ;#{ ;"transform-origin;"create-transformo;
;iA;	@;;;
[ ;["q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */o;;T;iL;[[o;;"
scale;	@;"
scaleo;&;iD;	@;F[o;;"rotate;	@;"rotateo;&;iE;	@;F[o;;"trans_x;	@;"trans-xo;&;iF;	@;F[o;;"trans_y;	@;"trans-yo;&;iG;	@;F[o;;"skew_x;	@;"skew-xo;&;iH;	@;F[o;;"skew_y;	@;"skew-yo;&;iI;	@;F[o;;"origin_x;	@;"origin-xo;&;iJ;	@;F[o;;"origin_y;	@;"origin-yo;&;iK;	@;F;	@;
[o;);iU;[o;&;iN;	@;Fo;	;iO;"
scale;	@;"
scaleo;	;iO;"
scale;	@;"
scaleo;&;iO;	@;Fo;&;iP;	@;Fo;&;iP;	@;Fo;	;iP;"rotate;	@;"rotateo;&;iP;	@;Fo;	;iQ;"trans_x;	@;"trans-xo;	;iQ;"trans_y;	@;"trans-yo;&;iQ;	@;Fo;	;iR;"skew_x;	@;"skew-xo;	;iR;"skew_y;	@;"skew-yo;	;iS;"origin_x;	@;"origin-xo;	;iS;"origin_y;	@;"origin-yo;&;iS;	@;Fo;&;iT;	@;F;	@;
[ ;#{ ;"create-transform;"simple-transform